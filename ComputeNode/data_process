#!/usr/bin/env python3
import socket
from csv import writer
from datetime import datetime
import os
import json
import time
from threading import Thread
from queue import Queue
import argparse

HOST = "127.0.0.1"  # The server's hostname or IP address
DATA_PORT = 12348  # The port at which the Android App sends measurements
KILL_OLD_PROCESS = "fuser " + str(DATA_PORT) + "/tcp"
PORT_REVERSE_COMMAND = "adb reverse tcp:" + str(DATA_PORT) + " tcp:" + str(DATA_PORT)
TCP_BUFFER_SIZE = 10000

# To Do: Receive entire message from Pawprints, using an end character.
def recv_stream_from_android(options, kafka_publish_queue):
    os.system(KILL_OLD_PROCESS)
    os.system(PORT_REVERSE_COMMAND)
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, DATA_PORT))
        s.listen()
        while True:
            conn, addr = s.accept()
            while True:
                data = conn.recv(TCP_BUFFER_SIZE).decode('utf-8')
                if len(data) == 0:
                    break
                print(data)
                
                data_obj = json.loads(data)
                
                log_prefix = options.logprefix
                if log_prefix is None:
                    log_prefix = data_obj["campaign_name"]

                log_type = data_obj["type"] if "type" in data_obj else "cellular"
                log_path = os.path.join(options.logdir, log_prefix + "_" + log_type + ".jsonl")
                    
                if not os.path.exists(options.logdir):
                    os.makedirs(options.logdir)

                data_obj["companion_abs_time"] = time.time()*1000.0

                log_string = json.dumps(data_obj)
                
                with open(log_path, "a") as file_object:
                    file_object.write(log_string + "\n")

                if options.kafka:
                    kafka_publish_queue.put(log_string)


def main():
    parser = argparse.ArgumentParser(description='This is the PawPrints companion script, meant to be run on a compute node connected to PawPrints via USB. This script receives measurements from PawPrints Phone App, over ADB and saves locally as JSON files. Different JSON files are created for cellular and motions logs. Optionally, measurements can also be sent to a Kafka broker, to be analyzed and visualized by remote control or monitoring centers. ')

    parser.add_argument('-p', '--logprefix', type=str, help='Optional. Prefix of the log file. prefix_cellular.jsonl and prefix_motion.jsonl logs will be generated. If not provided, the measurement campaign name, as specified in the measurement stream received from the phone, will be used as the prefix.')

    parser.add_argument('-d', '--logdir', type=str, default="./Logs", help="Optional. Path of the logs directory. Directory will be created if it doesn't exist. If not provided, logs will be saved under ./Logs.")

    parser.add_argument('-k', '--kafka', action='store_true', help="Optional. Enable publishing measurements to Kafka.")

    options = parser.parse_args()

    print(options.kafka)
    print(options.logprefix)
    print(options.logdir)

    msg_queue = Queue()
    if options.kafka:
        import kafka_publish
        t_kafka = Thread(target=kafka_publish.publish_loop, args=(msg_queue,))
        t_kafka.start()
    
    t_from_android = Thread(target=recv_stream_from_android, args=(options, msg_queue,))
    t_from_android.start()


if __name__ == "__main__":
    main()



